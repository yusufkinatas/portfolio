"""Represents a binary file in a space. An asset can be any file type."""
type Asset {
  sys: Sys!
  contentfulMetadata: ContentfulMetadata!
  title(locale: String): String
  description(locale: String): String
  contentType(locale: String): String
  fileName(locale: String): String
  size(locale: String): Int
  url(transform: ImageTransformOptions, locale: String): String
  width(locale: String): Int
  height(locale: String): Int
  linkedFrom(allowedLocales: [String]): AssetLinkingCollections
}

type AssetCollection {
  total: Int!
  skip: Int!
  limit: Int!
  items: [Asset]!
}

input AssetFilter {
  sys: SysFilter
  contentfulMetadata: ContentfulMetadataFilter
  title_exists: Boolean
  title: String
  title_not: String
  title_in: [String]
  title_not_in: [String]
  title_contains: String
  title_not_contains: String
  description_exists: Boolean
  description: String
  description_not: String
  description_in: [String]
  description_not_in: [String]
  description_contains: String
  description_not_contains: String
  url_exists: Boolean
  url: String
  url_not: String
  url_in: [String]
  url_not_in: [String]
  url_contains: String
  url_not_contains: String
  size_exists: Boolean
  size: Int
  size_not: Int
  size_in: [Int]
  size_not_in: [Int]
  size_gt: Int
  size_gte: Int
  size_lt: Int
  size_lte: Int
  contentType_exists: Boolean
  contentType: String
  contentType_not: String
  contentType_in: [String]
  contentType_not_in: [String]
  contentType_contains: String
  contentType_not_contains: String
  fileName_exists: Boolean
  fileName: String
  fileName_not: String
  fileName_in: [String]
  fileName_not_in: [String]
  fileName_contains: String
  fileName_not_contains: String
  width_exists: Boolean
  width: Int
  width_not: Int
  width_in: [Int]
  width_not_in: [Int]
  width_gt: Int
  width_gte: Int
  width_lt: Int
  width_lte: Int
  height_exists: Boolean
  height: Int
  height_not: Int
  height_in: [Int]
  height_not_in: [Int]
  height_gt: Int
  height_gte: Int
  height_lt: Int
  height_lte: Int
  OR: [AssetFilter]
  AND: [AssetFilter]
}

type AssetLinkingCollections {
  entryCollection(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String): EntryCollection
  projectCollection(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String): ProjectCollection
  resumePageCollection(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String): ResumePageCollection
  skillListCollection(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String): SkillListCollection
}

enum AssetOrder {
  url_ASC
  url_DESC
  size_ASC
  size_DESC
  contentType_ASC
  contentType_DESC
  fileName_ASC
  fileName_DESC
  width_ASC
  width_DESC
  height_ASC
  height_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
}

type ContentfulMetadata {
  tags: [ContentfulTag]!
}

input ContentfulMetadataFilter {
  tags_exists: Boolean
  tags: ContentfulMetadataTagsFilter
}

input ContentfulMetadataTagsFilter {
  id_contains_all: [String]
  id_contains_some: [String]
  id_contains_none: [String]
}

"""
Represents a tag entity for finding and organizing content easily.
    Find out more here: https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/content-tags
"""
type ContentfulTag {
  id: String
  name: String
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z,
    compliant with the 'date-time' format outlined in section 5.6 of
    the RFC 3339 profile of the ISO 8601 standard for representation
    of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""
The 'Dimension' type represents dimensions as whole numeric values between `1` and `4000`.
"""
scalar Dimension

interface Entry {
  sys: Sys!
  contentfulMetadata: ContentfulMetadata!
}

type EntryCollection {
  total: Int!
  skip: Int!
  limit: Int!
  items: [Entry]!
}

input EntryFilter {
  sys: SysFilter
  contentfulMetadata: ContentfulMetadataFilter
  OR: [EntryFilter]
  AND: [EntryFilter]
}

enum EntryOrder {
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
}

"""
[See type definition](https://app.contentful.com/spaces/fydf0o2ery42/content_types/experience)
"""
type Experience implements Entry {
  sys: Sys!
  contentfulMetadata: ContentfulMetadata!
  linkedFrom(allowedLocales: [String]): ExperienceLinkingCollections
  company(locale: String): String
  title(locale: String): String
  year(locale: String): String
}

type ExperienceCollection {
  total: Int!
  skip: Int!
  limit: Int!
  items: [Experience]!
}

input ExperienceFilter {
  sys: SysFilter
  contentfulMetadata: ContentfulMetadataFilter
  company_exists: Boolean
  company: String
  company_not: String
  company_in: [String]
  company_not_in: [String]
  company_contains: String
  company_not_contains: String
  title_exists: Boolean
  title: String
  title_not: String
  title_in: [String]
  title_not_in: [String]
  title_contains: String
  title_not_contains: String
  year_exists: Boolean
  year: String
  year_not: String
  year_in: [String]
  year_not_in: [String]
  year_contains: String
  year_not_contains: String
  OR: [ExperienceFilter]
  AND: [ExperienceFilter]
}

type ExperienceLinkingCollections {
  entryCollection(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String): EntryCollection
  resumePageCollection(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String): ResumePageCollection
}

enum ExperienceOrder {
  company_ASC
  company_DESC
  title_ASC
  title_DESC
  year_ASC
  year_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
}

"""The 'HexColor' type represents color in `rgb:ffffff` string format."""
scalar HexColor

enum ImageFormat {
  """JPG image format."""
  JPG

  """
  Progressive JPG format stores multiple passes of an image in progressively higher detail.
          When a progressive image is loading, the viewer will first see a lower quality pixelated version which
          will gradually improve in detail, until the image is fully downloaded. This is to display an image as
          early as possible to make the layout look as designed.
  """
  JPG_PROGRESSIVE

  """PNG image format"""
  PNG

  """
  8-bit PNG images support up to 256 colors and weigh less than the standard 24-bit PNG equivalent.
          The 8-bit PNG format is mostly used for simple images, such as icons or logos.
  """
  PNG8

  """WebP image format."""
  WEBP
  AVIF
}

enum ImageResizeFocus {
  """Focus the resizing on the center."""
  CENTER

  """Focus the resizing on the top."""
  TOP

  """Focus the resizing on the top right."""
  TOP_RIGHT

  """Focus the resizing on the right."""
  RIGHT

  """Focus the resizing on the bottom right."""
  BOTTOM_RIGHT

  """Focus the resizing on the bottom."""
  BOTTOM

  """Focus the resizing on the bottom left."""
  BOTTOM_LEFT

  """Focus the resizing on the left."""
  LEFT

  """Focus the resizing on the top left."""
  TOP_LEFT

  """Focus the resizing on the largest face."""
  FACE

  """Focus the resizing on the area containing all the faces."""
  FACES
}

enum ImageResizeStrategy {
  """Resizes the image to fit into the specified dimensions."""
  FIT

  """
  Resizes the image to the specified dimensions, padding the image if needed.
          Uses desired background color as padding color.
  """
  PAD

  """
  Resizes the image to the specified dimensions, cropping the image if needed.
  """
  FILL

  """
  Resizes the image to the specified dimensions, changing the original aspect ratio if needed.
  """
  SCALE

  """
  Crops a part of the original image to fit into the specified dimensions.
  """
  CROP

  """Creates a thumbnail from the image."""
  THUMB
}

input ImageTransformOptions {
  """Desired width in pixels. Defaults to the original image width."""
  width: Dimension

  """Desired height in pixels. Defaults to the original image height."""
  height: Dimension

  """
  Desired quality of the image in percents.
          Used for `PNG8`, `JPG`, `JPG_PROGRESSIVE` and `WEBP` formats.
  """
  quality: Quality

  """
  Desired corner radius in pixels.
          Results in an image with rounded corners (pass `-1` for a full circle/ellipse).
          Defaults to `0`. Uses desired background color as padding color,
          unless the format is `JPG` or `JPG_PROGRESSIVE` and resize strategy is `PAD`, then defaults to white.
  """
  cornerRadius: Int

  """Desired resize strategy. Defaults to `FIT`."""
  resizeStrategy: ImageResizeStrategy

  """Desired resize focus area. Defaults to `CENTER`."""
  resizeFocus: ImageResizeFocus

  """
  Desired background color, used with corner radius or `PAD` resize strategy.
          Defaults to transparent (for `PNG`, `PNG8` and `WEBP`) or white (for `JPG` and `JPG_PROGRESSIVE`).
  """
  backgroundColor: HexColor

  """Desired image format. Defaults to the original image format."""
  format: ImageFormat
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""
[See type definition](https://app.contentful.com/spaces/fydf0o2ery42/content_types/person)
"""
type Person implements Entry {
  sys: Sys!
  contentfulMetadata: ContentfulMetadata!
  linkedFrom(allowedLocales: [String]): PersonLinkingCollections
  name(locale: String): String
  title(locale: String): String
  description(locale: String): PersonDescription
  contactText(locale: String): PersonContactText
}

type PersonCollection {
  total: Int!
  skip: Int!
  limit: Int!
  items: [Person]!
}

type PersonContactText {
  json: JSON!
  links: PersonContactTextLinks!
}

type PersonContactTextAssets {
  hyperlink: [Asset]!
  block: [Asset]!
}

type PersonContactTextEntries {
  inline: [Entry]!
  hyperlink: [Entry]!
  block: [Entry]!
}

type PersonContactTextLinks {
  entries: PersonContactTextEntries!
  assets: PersonContactTextAssets!
}

type PersonDescription {
  json: JSON!
  links: PersonDescriptionLinks!
}

type PersonDescriptionAssets {
  hyperlink: [Asset]!
  block: [Asset]!
}

type PersonDescriptionEntries {
  inline: [Entry]!
  hyperlink: [Entry]!
  block: [Entry]!
}

type PersonDescriptionLinks {
  entries: PersonDescriptionEntries!
  assets: PersonDescriptionAssets!
}

input PersonFilter {
  sys: SysFilter
  contentfulMetadata: ContentfulMetadataFilter
  name_exists: Boolean
  name: String
  name_not: String
  name_in: [String]
  name_not_in: [String]
  name_contains: String
  name_not_contains: String
  title_exists: Boolean
  title: String
  title_not: String
  title_in: [String]
  title_not_in: [String]
  title_contains: String
  title_not_contains: String
  description_exists: Boolean
  description_contains: String
  description_not_contains: String
  contactText_exists: Boolean
  contactText_contains: String
  contactText_not_contains: String
  OR: [PersonFilter]
  AND: [PersonFilter]
}

type PersonLinkingCollections {
  entryCollection(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String): EntryCollection
}

enum PersonOrder {
  name_ASC
  name_DESC
  title_ASC
  title_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
}

"""
[See type definition](https://app.contentful.com/spaces/fydf0o2ery42/content_types/project)
"""
type Project implements Entry {
  sys: Sys!
  contentfulMetadata: ContentfulMetadata!
  linkedFrom(allowedLocales: [String]): ProjectLinkingCollections
  slug(locale: String): String
  name(locale: String): String
  categories(locale: String): [String]
  logo(preview: Boolean, locale: String): Asset
  imagesCollection(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String): AssetCollection
  youtubeVideoId(locale: String): String
  primaryColor(locale: String): String
  urLsCollection(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String): ProjectUrLsCollection
  description(locale: String): ProjectDescription
  techTagsCollection(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String): ProjectTechTagsCollection
}

type ProjectCollection {
  total: Int!
  skip: Int!
  limit: Int!
  items: [Project]!
}

type ProjectDescription {
  json: JSON!
  links: ProjectDescriptionLinks!
}

type ProjectDescriptionAssets {
  hyperlink: [Asset]!
  block: [Asset]!
}

type ProjectDescriptionEntries {
  inline: [Entry]!
  hyperlink: [Entry]!
  block: [Entry]!
}

type ProjectDescriptionLinks {
  entries: ProjectDescriptionEntries!
  assets: ProjectDescriptionAssets!
}

input ProjectFilter {
  sys: SysFilter
  contentfulMetadata: ContentfulMetadataFilter
  slug_exists: Boolean
  slug: String
  slug_not: String
  slug_in: [String]
  slug_not_in: [String]
  slug_contains: String
  slug_not_contains: String
  name_exists: Boolean
  name: String
  name_not: String
  name_in: [String]
  name_not_in: [String]
  name_contains: String
  name_not_contains: String
  categories_exists: Boolean
  categories_contains_all: [String]
  categories_contains_some: [String]
  categories_contains_none: [String]
  logo_exists: Boolean
  imagesCollection_exists: Boolean
  youtubeVideoId_exists: Boolean
  youtubeVideoId: String
  youtubeVideoId_not: String
  youtubeVideoId_in: [String]
  youtubeVideoId_not_in: [String]
  youtubeVideoId_contains: String
  youtubeVideoId_not_contains: String
  primaryColor_exists: Boolean
  primaryColor: String
  primaryColor_not: String
  primaryColor_in: [String]
  primaryColor_not_in: [String]
  primaryColor_contains: String
  primaryColor_not_contains: String
  urLsCollection_exists: Boolean
  description_exists: Boolean
  description_contains: String
  description_not_contains: String
  techTagsCollection_exists: Boolean
  OR: [ProjectFilter]
  AND: [ProjectFilter]
}

type ProjectLinkingCollections {
  entryCollection(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String): EntryCollection
  projectPageCollection(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String): ProjectPageCollection
}

enum ProjectOrder {
  slug_ASC
  slug_DESC
  name_ASC
  name_DESC
  youtubeVideoId_ASC
  youtubeVideoId_DESC
  primaryColor_ASC
  primaryColor_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
}

"""
[See type definition](https://app.contentful.com/spaces/fydf0o2ery42/content_types/projectPage)
"""
type ProjectPage implements Entry {
  sys: Sys!
  contentfulMetadata: ContentfulMetadata!
  linkedFrom(allowedLocales: [String]): ProjectPageLinkingCollections
  projectsCollection(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String): ProjectPageProjectsCollection
}

type ProjectPageCollection {
  total: Int!
  skip: Int!
  limit: Int!
  items: [ProjectPage]!
}

input ProjectPageFilter {
  sys: SysFilter
  contentfulMetadata: ContentfulMetadataFilter
  projectsCollection_exists: Boolean
  OR: [ProjectPageFilter]
  AND: [ProjectPageFilter]
}

type ProjectPageLinkingCollections {
  entryCollection(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String): EntryCollection
}

enum ProjectPageOrder {
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
}

type ProjectPageProjectsCollection {
  total: Int!
  skip: Int!
  limit: Int!
  items: [Project]!
}

type ProjectTechTagsCollection {
  total: Int!
  skip: Int!
  limit: Int!
  items: [TechTag]!
}

type ProjectUrLsCollection {
  total: Int!
  skip: Int!
  limit: Int!
  items: [ProjectUrl]!
}

"""
[See type definition](https://app.contentful.com/spaces/fydf0o2ery42/content_types/projectUrl)
"""
type ProjectUrl implements Entry {
  sys: Sys!
  contentfulMetadata: ContentfulMetadata!
  linkedFrom(allowedLocales: [String]): ProjectUrlLinkingCollections
  url(locale: String): String
  type(locale: String): String
  title(locale: String): String
}

type ProjectUrlCollection {
  total: Int!
  skip: Int!
  limit: Int!
  items: [ProjectUrl]!
}

input ProjectUrlFilter {
  sys: SysFilter
  contentfulMetadata: ContentfulMetadataFilter
  url_exists: Boolean
  url: String
  url_not: String
  url_in: [String]
  url_not_in: [String]
  url_contains: String
  url_not_contains: String
  Type_exists: Boolean
  Type: String
  Type_not: String
  Type_in: [String]
  Type_not_in: [String]
  Type_contains: String
  Type_not_contains: String
  title_exists: Boolean
  title: String
  title_not: String
  title_in: [String]
  title_not_in: [String]
  title_contains: String
  title_not_contains: String
  OR: [ProjectUrlFilter]
  AND: [ProjectUrlFilter]
}

type ProjectUrlLinkingCollections {
  entryCollection(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String): EntryCollection
  projectCollection(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String): ProjectCollection
}

enum ProjectUrlOrder {
  url_ASC
  url_DESC
  Type_ASC
  Type_DESC
  title_ASC
  title_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
}

"""
The 'Quality' type represents quality as whole numeric values between `1` and `100`.
"""
scalar Quality

type Query {
  asset(id: String!, preview: Boolean, locale: String): Asset
  assetCollection(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String, where: AssetFilter, order: [AssetOrder]): AssetCollection
  project(id: String!, preview: Boolean, locale: String): Project
  projectCollection(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String, where: ProjectFilter, order: [ProjectOrder]): ProjectCollection
  techTag(id: String!, preview: Boolean, locale: String): TechTag
  techTagCollection(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String, where: TechTagFilter, order: [TechTagOrder]): TechTagCollection
  projectUrl(id: String!, preview: Boolean, locale: String): ProjectUrl
  projectUrlCollection(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String, where: ProjectUrlFilter, order: [ProjectUrlOrder]): ProjectUrlCollection
  experience(id: String!, preview: Boolean, locale: String): Experience
  experienceCollection(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String, where: ExperienceFilter, order: [ExperienceOrder]): ExperienceCollection
  person(id: String!, preview: Boolean, locale: String): Person
  personCollection(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String, where: PersonFilter, order: [PersonOrder]): PersonCollection
  projectPage(id: String!, preview: Boolean, locale: String): ProjectPage
  projectPageCollection(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String, where: ProjectPageFilter, order: [ProjectPageOrder]): ProjectPageCollection
  resumePage(id: String!, preview: Boolean, locale: String): ResumePage
  resumePageCollection(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String, where: ResumePageFilter, order: [ResumePageOrder]): ResumePageCollection
  skillList(id: String!, preview: Boolean, locale: String): SkillList
  skillListCollection(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String, where: SkillListFilter, order: [SkillListOrder]): SkillListCollection
  entryCollection(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String, where: EntryFilter, order: [EntryOrder]): EntryCollection
}

"""
[See type definition](https://app.contentful.com/spaces/fydf0o2ery42/content_types/resumePage)
"""
type ResumePage implements Entry {
  sys: Sys!
  contentfulMetadata: ContentfulMetadata!
  linkedFrom(allowedLocales: [String]): ResumePageLinkingCollections
  experiencesCollection(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String): ResumePageExperiencesCollection
  resumePdf(preview: Boolean, locale: String): Asset
  skillList1(preview: Boolean, locale: String): SkillList
  skillList2(preview: Boolean, locale: String): SkillList
  skillList3(preview: Boolean, locale: String): SkillList
  skillList4(preview: Boolean, locale: String): SkillList
}

type ResumePageCollection {
  total: Int!
  skip: Int!
  limit: Int!
  items: [ResumePage]!
}

type ResumePageExperiencesCollection {
  total: Int!
  skip: Int!
  limit: Int!
  items: [Experience]!
}

input ResumePageFilter {
  skillList1: cfSkillListNestedFilter
  skillList2: cfSkillListNestedFilter
  skillList3: cfSkillListNestedFilter
  skillList4: cfSkillListNestedFilter
  sys: SysFilter
  contentfulMetadata: ContentfulMetadataFilter
  experiencesCollection_exists: Boolean
  resumePdf_exists: Boolean
  skillList1_exists: Boolean
  skillList2_exists: Boolean
  skillList3_exists: Boolean
  skillList4_exists: Boolean
  OR: [ResumePageFilter]
  AND: [ResumePageFilter]
}

type ResumePageLinkingCollections {
  entryCollection(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String): EntryCollection
}

enum ResumePageOrder {
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
}

"""
[See type definition](https://app.contentful.com/spaces/fydf0o2ery42/content_types/skillList)
"""
type SkillList implements Entry {
  sys: Sys!
  contentfulMetadata: ContentfulMetadata!
  linkedFrom(allowedLocales: [String]): SkillListLinkingCollections
  title(locale: String): String
  icon(preview: Boolean, locale: String): Asset
  skills(locale: String): [String]
}

type SkillListCollection {
  total: Int!
  skip: Int!
  limit: Int!
  items: [SkillList]!
}

input SkillListFilter {
  sys: SysFilter
  contentfulMetadata: ContentfulMetadataFilter
  title_exists: Boolean
  title: String
  title_not: String
  title_in: [String]
  title_not_in: [String]
  title_contains: String
  title_not_contains: String
  icon_exists: Boolean
  skills_exists: Boolean
  skills_contains_all: [String]
  skills_contains_some: [String]
  skills_contains_none: [String]
  OR: [SkillListFilter]
  AND: [SkillListFilter]
}

type SkillListLinkingCollections {
  entryCollection(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String): EntryCollection
  resumePageCollection(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String): ResumePageCollection
}

enum SkillListOrder {
  title_ASC
  title_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
}

type Sys {
  id: String!
  spaceId: String!
  environmentId: String!
  publishedAt: DateTime
  firstPublishedAt: DateTime
  publishedVersion: Int
}

input SysFilter {
  id_exists: Boolean
  id: String
  id_not: String
  id_in: [String]
  id_not_in: [String]
  id_contains: String
  id_not_contains: String
  publishedAt_exists: Boolean
  publishedAt: DateTime
  publishedAt_not: DateTime
  publishedAt_in: [DateTime]
  publishedAt_not_in: [DateTime]
  publishedAt_gt: DateTime
  publishedAt_gte: DateTime
  publishedAt_lt: DateTime
  publishedAt_lte: DateTime
  firstPublishedAt_exists: Boolean
  firstPublishedAt: DateTime
  firstPublishedAt_not: DateTime
  firstPublishedAt_in: [DateTime]
  firstPublishedAt_not_in: [DateTime]
  firstPublishedAt_gt: DateTime
  firstPublishedAt_gte: DateTime
  firstPublishedAt_lt: DateTime
  firstPublishedAt_lte: DateTime
  publishedVersion_exists: Boolean
  publishedVersion: Float
  publishedVersion_not: Float
  publishedVersion_in: [Float]
  publishedVersion_not_in: [Float]
  publishedVersion_gt: Float
  publishedVersion_gte: Float
  publishedVersion_lt: Float
  publishedVersion_lte: Float
}

"""
[See type definition](https://app.contentful.com/spaces/fydf0o2ery42/content_types/techTag)
"""
type TechTag implements Entry {
  sys: Sys!
  contentfulMetadata: ContentfulMetadata!
  linkedFrom(allowedLocales: [String]): TechTagLinkingCollections
  slug(locale: String): String
  name(locale: String): String
}

type TechTagCollection {
  total: Int!
  skip: Int!
  limit: Int!
  items: [TechTag]!
}

input TechTagFilter {
  sys: SysFilter
  contentfulMetadata: ContentfulMetadataFilter
  slug_exists: Boolean
  slug: String
  slug_not: String
  slug_in: [String]
  slug_not_in: [String]
  slug_contains: String
  slug_not_contains: String
  name_exists: Boolean
  name: String
  name_not: String
  name_in: [String]
  name_not_in: [String]
  name_contains: String
  name_not_contains: String
  OR: [TechTagFilter]
  AND: [TechTagFilter]
}

type TechTagLinkingCollections {
  entryCollection(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String): EntryCollection
  projectCollection(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String): ProjectCollection
}

enum TechTagOrder {
  slug_ASC
  slug_DESC
  name_ASC
  name_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
}

input cfSkillListNestedFilter {
  sys: SysFilter
  contentfulMetadata: ContentfulMetadataFilter
  title_exists: Boolean
  title: String
  title_not: String
  title_in: [String]
  title_not_in: [String]
  title_contains: String
  title_not_contains: String
  icon_exists: Boolean
  skills_exists: Boolean
  skills_contains_all: [String]
  skills_contains_some: [String]
  skills_contains_none: [String]
  OR: [cfSkillListNestedFilter]
  AND: [cfSkillListNestedFilter]
}
